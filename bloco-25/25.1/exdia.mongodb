use('erp');


// // Exercício 1: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "MASCULINO" .
// db.clientes.find()

// db.clientes.aggregate(
//   [
//     { $match: { sexo: "MASCULINO"}}
//   ]
// );


// Exercício 2: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 .

// use('erp');

// db.clientes.find()

// db.clientes.aggregate(
//   [
//     { $match: {
//       sexo:"FEMININO",
//       'dataNascimento': {
//         $gt: new Date("1995-01-01T00:00:00.000Z"),
//         $lt: new Date("2006-01-01T00:00:00.000Z")
//       }
//     }   
//   }
// ])

// db.clientes.aggregate([
//   {
//       match: {
//       sexo: "FEMININO",
//       dataNascimento: {
//       gte: ISODate('1995-01-01'),
//       lte: ISODate('2005-12-31')
//       }
//     }
//   }
// ]);

// Exercício 3: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 , limitando a quantidade de documentos retornados em 5 .

// use('erp');

// db.clientes.find()

// db.clientes.aggregate(
//   [
//     { $match: {
//       sexo:"FEMININO",
//       'dataNascimento': {
//         $gt: new Date("1995-01-01T00:00:00.000Z"),
//         $lt: new Date("2006-01-01T00:00:00.000Z")
//       }
//     },     
//   },
//   {
//     $limit: 5  
//   }
// ])

// Exercício 4: Conte quantos clientes do estado SC existem na coleção. Retorne um documento em que o campo _id contenha a UF e outro campo com o total.


// use('erp');

// db.clientes.aggregate(
//   [
//     { $match: { "endereco.uf": "SC" } },
//     { 
//       $group: {
//         _id: "$endereco.uf",
//         total: { $sum: 1 }
//       }
//      }
//   ]
// );

// Exercício 5: Agrupe os clientes por sexo . Retorne o total de clientes de cada sexo no campo total .

// use('erp');
// db.clientes.find()

// db.clientes.aggregate(
//   [
//     { 
//       $group: {
//         _id: "$sexo",
//         total: { $sum: 1 }
//       }
//      }
//   ]
// );

// Exercício 6: Agrupe os clientes por sexo e uf . Retorne o total de clientes de cada sexo no campo total .

// use('erp');

// db.clientes.aggregate(
//   [
//     { 
//       $group: {
//         _id: { "sexo": "$sexo", "enderecoUF": "$endereco.uf" },
//         total: { $sum: 1 },
//       }
//      }
//   ]
// );

// Exercício 7 : Utilizando a mesma agregação do exercício anterior, adicione um estágio de projeção para modificar os documentos de saída, de forma que se pareçam com o documento a seguir (não se importe com a ordem dos campos):

// use('erp');

// db.clientes.aggregate(
//   [
//     { 
//       $group: {
//         _id: { "sexo": "$sexo", "estado": "$endereco.uf" },
//         total: { $sum: 1 },
//       }
//      }
//   ]
// );

// Exercício 8 : Descubra quais são os 5 clientes que gastaram o maior valor.

// db.vendas.find()


// db.vendas.aggregate(
//   [
//     {
//       $sort: { valorTotal: -1 }
//     },
//     {
//       $limit: 5
//     },
//     {
//       $project: {
//         _id: 0,
//         clienteId: 1,
//         valorTotal: 1
//       }
//     }
//   ]
// )

// db.vendas.aggregate([
//   {
// match: {
//       status: { $in: ["ENTREGUE", "EM SEPARACAO"] }
//     }
//   },
//   {
// group: {
//        _id: "$clienteId",
//        valorTotal: {
// sum: "$valorTotal"
//        }
//     }
//   },
//   {
// sort: {
//       valorTotal: -1
//     }
//   },
//   {
// limit: 5
//   }
// ]);

// Exercício 9 : Descubra quais são os 10 clientes que gastaram o maior valor no ano de 2019 .

// db.vendas.find()

// db.vendas.aggregate(
//   [
//     { $match: { 'dataVenda': {
//       $gte: new Date('2019-01-01T00:00:00.000Z'),
//       $lt: new Date('2020-01-01T00:00:00.000Z')
//     } }},
//     {
//       $sort: { valorTotal: -1 }
//     },
//     {
//       $limit: 10
//     },
//     {
//       $project: {
//         _id: 0,
//         clienteId: 1,
//         valorTotal: 1
//       }
//     }
//   ]
// )

// db.vendas.aggregate([
//   {
// match: {
//       dataVenda: {
// gte: ISODate('2019-01-01'),
// lte: ISODate('2019-12-31')
//       }
//     }
//   },
//   {
// group: {
//       _id: "$clienteId",
//       valorTotal: {
// sum: "$valorTotal"
//       }
//     }
//   },
//   {
// sort: {
//       valotTotal: -1
//     }
//   },
//   {
// limit: 10
//   }
// ]);

// Exercício 10 : Descubra quantos clientes compraram mais de 5 vezes. Retorne um documento que contenha somente o campo clientes com o total de clientes.

// db.vendas.aggregate(
//   [
//     {
//       $group: {
//         _id: "$clienteId",
//         count: { $sum: 1 }
//       }
//     },
//     {
//       $match: {
//         count: { $gt: 5 }
//       }
//     },
//     {
//       $count: "total"
//     }
//   ]
// )

// Exercício 11 : Descubra quantos clientes compraram menos de três vezes entre os meses de Janeiro de 2020 e Março de 2020 .

// db.vendas.aggregate(
//   [
//     { $match: { 'dataVenda': {
//       $gte: new Date('2020-01-01T00:00:00.000Z'),
//       $lt: new Date('2020-03-01T00:00:00.000Z')
//     } }},
//     {
//       $group: {
//         _id: "$clienteId",
//         count: { $sum: 1 }
//       }
//     },
//     {
//       $match: { count: { $lt: 3 } }
//     },
//     {
//       $count: "clientes"
//     }
//   ]
// )

// Exercício 12 : Descubra quais as três uf s que mais compraram no ano de 2020 . Retorne os documentos no seguinte formato:

// db.vendas.find()


db.vendas.aggregate([
  {
    $match: {
      dataVenda: {
        $gte: new Date('2020-01-01T00:00:00.000Z'),
        $lt: new Date('2021-01-01T00:00:00.000Z')
      }
    }
  },
  {
$lookup: {
      from: "clientes",
      localField: "clienteId",
      foreignField: "clienteId",
      as: "clientesVendas"
    }
  },
  {
    $group: { 
      _id: {
        "endereco": "$clientesVendas.endereco.uf",
        },
      total: { $sum: 1 }
    }
  }
]);

// Exercício 13 : Encontre qual foi o total de vendas e a média de vendas de cada uf no ano de 2019 . Ordene os resultados pelo nome da uf . Retorne os documentos no seguinte formato:

// db.vendas.aggregate([
//   {
//     $match: {
//       dataVenda: {
//         $gte: new Date('2019-01-01T00:00:00.000Z'),
//         $lt: new Date('2020-01-01T00:00:00.000Z')
//       }
//     }
//   },
//   {
// $lookup: {
//       from: "clientes",
//       localField: "clienteId",
//       foreignField: "clienteId",
//       as: "clientesVendas"
//     }
//   },
//   {
//     $group: { 
//       _id: {
//         "endereco": "$clientesVendas.endereco.uf",
//         "vendas": "itens"
//         },
//       total: { $sum: 1 },
//       media: { $avg: "$valorTotal" }
//     }
//   }
// ]);